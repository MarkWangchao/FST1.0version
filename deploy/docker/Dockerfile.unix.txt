# Simplified Dockerfile with inline entrypoint script
FROM python:3.9

WORKDIR /app

# Set mirrors based on build arguments
ARG USE_CN_MIRROR=true
ARG PIP_INDEX_URL=https://pypi.org/simple/
ARG PIP_TRUSTED_HOST=pypi.org

# Configure pip mirrors
RUN if [ "$USE_CN_MIRROR" = "true" ]; then \
      echo "Using CN mirrors"; \
      pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/; \
      pip config set global.trusted-host mirrors.aliyun.com; \
    else \
      echo "Using official mirrors"; \
      pip config set global.index-url $PIP_INDEX_URL; \
      pip config set global.trusted-host $PIP_TRUSTED_HOST; \
    fi

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    wget \
    gcc \
    g++ \
    netcat \
    && rm -rf /var/lib/apt/lists/*

# Download and install TA-Lib
RUN wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz \
    && tar -xzf ta-lib-0.4.0-src.tar.gz \
    && cd ta-lib/ \
    && ./configure --prefix=/usr \
    && make \
    && make install \
    && cd .. \
    && rm -rf ta-lib ta-lib-0.4.0-src.tar.gz

# Copy requirements directly
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create entrypoint script directly in the Dockerfile
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# 检查环境变量\n\
echo "Starting FST Trading Platform..."\n\
echo "Environment: ${ENVIRONMENT:-development}"\n\
\n\
# 等待依赖服务就绪\n\
wait_for_service() {\n\
    local host="$1"\n\
    local port="$2"\n\
    local service="$3"\n\
    local timeout=30\n\
    local count=0\n\
    \n\
    echo "Waiting for $service to be ready..."\n\
    until nc -z -w 1 "$host" "$port" > /dev/null 2>&1; do\n\
        count=$((count + 1))\n\
        if [ $count -ge $timeout ]; then\n\
            echo "Timeout reached waiting for $service to be ready"\n\
            return 1\n\
        fi\n\
        echo "Waiting for $service to be ready... ($count/$timeout)"\n\
        sleep 1\n\
    done\n\
    echo "$service is ready!"\n\
    return 0\n\
}\n\
\n\
# 等待MongoDB (如果配置了)\n\
if [ ! -z "$MONGODB_HOST" ]; then\n\
    wait_for_service "$MONGODB_HOST" "${MONGODB_PORT:-27017}" "MongoDB"\n\
fi\n\
\n\
# 等待Redis (如果配置了)\n\
if [ ! -z "$REDIS_HOST" ]; then\n\
    wait_for_service "$REDIS_HOST" "${REDIS_PORT:-6379}" "Redis"\n\
fi\n\
\n\
# 初始化数据库(如果需要)\n\
if [ "$INITIALIZE_DB" = "true" ]; then\n\
    echo "Initializing database..."\n\
    python scripts/init_db.py\n\
    echo "Database initialized!"\n\
fi\n\
\n\
# 启动应用\n\
echo "Starting application with command: $@"\n\
exec "$@"\n'\
> /entrypoint.sh \
&& chmod +x /entrypoint.sh

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app

# Expose application port
EXPOSE 8000

# Set entry point
ENTRYPOINT ["/entrypoint.sh"]

# Default command
CMD ["python", "main.py", "--config", "config/local_config.yaml"]