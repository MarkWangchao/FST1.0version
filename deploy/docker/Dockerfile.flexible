# Multi-stage build for the Trading Platform with flexible mirror settings
# Stage 1: Build dependencies and application
FROM python:3.9 AS builder

WORKDIR /app

# 允许在构建时指定是否使用国内镜像
ARG USE_CN_MIRROR=true
ARG PIP_INDEX_URL=https://pypi.org/simple/
ARG PIP_TRUSTED_HOST=pypi.org
ARG APT_MIRROR=deb.debian.org

# 根据构建参数配置镜像源
RUN if [ "$USE_CN_MIRROR" = "true" ]; then \
      echo "Using CN mirrors"; \
      pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/; \
      pip config set global.trusted-host mirrors.aliyun.com; \
      if [ -f /etc/apt/sources.list ]; then \
        sed -i "s/$APT_MIRROR/mirrors.aliyun.com/g" /etc/apt/sources.list; \
      fi; \
    else \
      echo "Using official mirrors"; \
      pip config set global.index-url $PIP_INDEX_URL; \
      pip config set global.trusted-host $PIP_TRUSTED_HOST; \
    fi

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    make \
    wget \
    ca-certificates \
    pkg-config \
    libssl-dev \
    libffi-dev \
    zlib1g-dev \
    libbz2-dev \
    liblzma-dev \
    && rm -rf /var/lib/apt/lists/*

# Download and install TA-Lib with flexible sources
RUN if [ "$USE_CN_MIRROR" = "true" ]; then \
      wget https://mirrors.tuna.tsinghua.edu.cn/gentoo/distfiles/ta-lib-0.4.0-src.tar.gz || \
      wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz; \
    else \
      wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz; \
    fi \
    && tar -xzf ta-lib-0.4.0-src.tar.gz \
    && cd ta-lib/ \
    && ./configure --prefix=/usr \
    && make \
    && make install \
    && cd .. \
    && rm -rf ta-lib ta-lib-0.4.0-src.tar.gz

# 准备依赖目录
RUN mkdir -p /app/wheels

# 复制精简依赖列表并构建 wheel
COPY deploy/docker/requirements-min.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements-min.txt

# 使用不含文档工具的依赖文件
COPY deploy/docker/requirements-build.txt .
# 添加重试机制，避免网络波动导致的失败
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements-build.txt || \
    (sleep 5 && pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements-build.txt) || \
    echo "Some wheels failed to build, continuing anyway"

# Stage 2: Runtime image
FROM python:3.9

WORKDIR /app

# 允许在构建时指定是否使用国内镜像
ARG USE_CN_MIRROR=true
ARG PIP_INDEX_URL=https://pypi.org/simple/
ARG PIP_TRUSTED_HOST=pypi.org

# 根据构建参数配置镜像源
RUN if [ "$USE_CN_MIRROR" = "true" ]; then \
      echo "Using CN mirrors"; \
      pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/; \
      pip config set global.trusted-host mirrors.aliyun.com; \
      mkdir -p /etc/apt/sources.list.d; \
      echo "deb https://mirrors.aliyun.com/debian bullseye main" > /etc/apt/sources.list.d/aliyun.list; \
      echo "deb https://mirrors.aliyun.com/debian bullseye-updates main" >> /etc/apt/sources.list.d/aliyun.list; \
    else \
      echo "Using official mirrors"; \
      pip config set global.index-url $PIP_INDEX_URL; \
      pip config set global.trusted-host $PIP_TRUSTED_HOST; \
    fi

# 安装核心系统依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libgomp1 \
    build-essential \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# 复制 TA-Lib 库
COPY --from=builder /usr/lib/libta_lib* /usr/lib/
COPY --from=builder /usr/include/ta-lib /usr/include/ta-lib

# 先安装预构建的 wheel
COPY --from=builder /app/wheels /wheels
RUN pip install --no-cache-dir --no-index --find-links=/wheels /wheels/* || true \
    && rm -rf /wheels

# Copy application code
COPY . .

# 创建非 root 用户
RUN groupadd -g 1000 appuser && \
    useradd -u 1000 -g appuser -s /bin/bash -m appuser \
    && chown -R appuser:appuser /app

# 复制并设置入口脚本
COPY deploy/docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# 切换到非 root 用户
USER appuser

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app

# 暴露应用端口
EXPOSE 8000

# 设置健康检查
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# 设置入口点
ENTRYPOINT ["/entrypoint.sh"]

# 默认命令
CMD ["python", "main.py", "--config", "config/local_config.yaml", "--port", "8000"]